# -*- coding: utf-8 -*-
"""customer segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16wGabSHIYSyUYokvqIE7EgKoN2t7O1d0

importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Data collection & Analysis"""

#loading the data from csv file to pandas dataframe
customer_data = pd.read_csv('/content/Mall_Customers.csv')

#first 5 rows in the dataframe
customer_data.head()

#finding the number of rows and columns
customer_data.shape

#getting some info abt dataset
customer_data.info()

#checking missing values
customer_data.isnull().sum()

"""chosing the annual income column & spending score column"""

X = customer_data.iloc[:, [3,4]].values

print(X)

"""choose correct num of clusters

> using WCSS ----> WITHIN CLUSTERS SUM OF SQUARE


"""

#finding wcss value for different number of clusters

wcss = []

for i in range(1,11):
  kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
  kmeans.fit(X)

  wcss.append(kmeans.inertia_)

#plot an elbow graph

sns.set()
plt.plot(range(1,11),wcss)
plt.title('the elbow point graph')
plt.xlabel('number of clusters')
plt.ylabel('WCSS')
plt.show()

"""optimum number of clusters is 5 , got it from elbow graph wcss value

Training k-means clustering model
"""

kmeans = KMeans(n_clusters = 5, init='k-means++', random_state=0)

#return a label for each data point based on their cluster
Y = kmeans.fit_predict(X)
print(Y)

"""clusters are 0,1,2,3,4

visualizing all the clusters
"""

#plotting all the clusters and their centroid

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='cluster1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='cluster2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='yellow', label='cluster3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='violet', label='cluster4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='blue', label='cluster5')

#plot the centroid
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='black', label='centroid')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

